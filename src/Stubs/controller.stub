<?php

namespace {{ControllersNamespace}};

use {{ServicesNamespace}}\{{ServicePrefix}}{{ModelName}}{{ServiceSufix}};
use Illuminate\Http\Request;
use {{TransformersNamespace}}\{{TransformerPrefix}}{{ModelName}}{{TransformerSufix}};
use {{RequestsNamespace}}\{{ModelName}}\{{RequestStorePrefix}}{{ModelName}}{{RequestSufix}};
use {{RequestsNamespace}}\{{ModelName}}\{{RequestUpdatePrefix}}{{ModelName}}{{RequestSufix}};
use Illuminate\Support\Facades\DB;
use App\Helpers\ResponseFormatter;
use Spatie\Fractal\Facades\Fractal;
use App\Http\Controllers\Controller;

class {{ControllerPrefix}}{{ModelName}}{{ControllerSufix}} extends Controller
{
    /**
     * Le service métier associé à ce contrôleur.
     *
     * @var {{ServicePrefix}}{{ModelName}}{{ServiceSufix}}
     */
    protected ${{ModelNameLowercase}}{{ServiceSufix}};

    /**
     * Crée une nouvelle instance du contrôleur.
     *
     * @param {{ServicePrefix}}{{ModelName}}{{ServiceSufix}} ${{ModelNameLowercase}}{{ServiceSufix}} Le service métier associé à ce contrôleur.
     */
    public function __construct({{ServicePrefix}}{{ModelName}}{{ServiceSufix}} ${{ModelNameLowercase}}{{ServiceSufix}})
    {
        $this->{{ModelNameLowercase}}{{ServiceSufix}} = ${{ModelNameLowercase}}{{ServiceSufix}};
    }

    /**
     * Récupère la liste des {{ModelNamePlural}}.
     *
     * @param Request $request La requête HTTP.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant la liste des {{ModelNamePlural}}.
     */
    public function index(Request $request)
    {
        try{
            $filters = $request->only([
                'id',
                'statut',
                'active',
            ]);
            
            ${{ModelNamePlural}} = $this->{{ModelNameLowercase}}{{ServiceSufix}}->getAll($filters);
            return Fractal::collection(${{ModelNamePlural}}, new {{TransformerPrefix}}{{ModelName}}{{TransformerSufix}}(true));
        } catch (\Throwable $th) {
            
            return ResponseFormatter::format("Une erreur est survenue lors de l'affichage de la liste des {{ModelNameLowercase}}s", true, 500);
        }
    }

    /**
     * Récupère un {{ModelNameLowercase}} par son ID.
     *
     * @param Request $request La requête HTTP.
     * @param string $id L'ID du {{ModelNameLowercase}} à récupérer.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant le {{ModelNameLowercase}}.
     */
    public function show(Request $request, string $id)
    {
        try {
            ${{ModelNameLowercase}} = $this->{{ModelNameLowercase}}{{ServiceSufix}}->getById($id);
            
            if (!${{ModelNameLowercase}}) {
                return ResponseFormatter::format("{{ModelName}} non trouvée", true, 404);
            }

            return Fractal::item(${{ModelNameLowercase}}, new {{TransformerPrefix}}{{ModelName}}{{TransformerSufix}}());
        } catch (\Throwable $th) {
            
            return ResponseFormatter::format("Une erreur est survenue lors de l'affichage de {{ModelNameLowercase}}");
        }
    }

    /**
     * Crée un nouveau {{ModelNameLowercase}}.
     *
     * @param Request $request La requête HTTP contenant les données du {{ModelNameLowercase}} à créer.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant le {{ModelNameLowercase}} créé.
     */
    public function store({{RequestStorePrefix}}{{ModelName}}{{RequestSufix}} $request)
    {
        try {
            DB::beginTransaction();

            $data = $request->validated();
            $user = $request->get('user_connected');
            
            $this->{{ModelNameLowercase}}{{ServiceSufix}}->create($data, $user);

            DB::commit();
            return ResponseFormatter::format('{{ModelName}} créée avec succès', false, 201);
        } catch (\Throwable $th) {
            DB::rollBack();
            return ResponseFormatter::format("Une erreur est survenue lors de la création de {{ModelNameLowercase}}");
        }
    }

    /**
     * Met à jour un {{ModelNameLowercase}} existant.
     *
     * @param Request $request La requête HTTP contenant les données du {{ModelNameLowercase}} à mettre à jour.
     * @param string $id L'ID du {{ModelNameLowercase}} à mettre à jour.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant le {{ModelNameLowercase}} mis à jour.
     */
    public function update({{RequestUpdatePrefix}}{{ModelName}}{{RequestSufix}} $request, string $id)
    {
        try{
            DB::beginTransaction();

            $data = $request->validated();
            $user = $request->get('user_connected');

            ${{ModelNameLowercase}} = $this->{{ModelNameLowercase}}{{ServiceSufix}}->getById($id);
                
            if (!${{ModelNameLowercase}}) {
                return ResponseFormatter::format("{{ModelName}} non trouvée", true, 404);
            }
            
            $this->{{ModelNameLowercase}}{{ServiceSufix}}->update(${{ModelNameLowercase}}, $data, $user);

            DB::commit();
            return ResponseFormatter::format('{{ModelName}} modifiée avec succès', false);
        } catch (\Throwable $th) {
            DB::rollBack();
            return ResponseFormatter::format("Une erreur est survenue lors de la modification de {{ModelNameLowercase}}");
        }
    }

    /**
     * Activer/Desactiver un {{ModelNameLowercase}} existant.
     *
     * @param Request $request La requête HTTP contenant les données du {{ModelNameLowercase}} à activer/desactiver.
     * @param string $id L'ID du {{ModelNameLowercase}} à activer/desactiver.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant le {{ModelNameLowercase}} activer/desactiver.
     */
    public function toggle({{RequestUpdatePrefix}}{{ModelName}}{{RequestSufix}} $request, string $id)
    {
        try {
            DB::beginTransaction();

            $data = $request->validated();
            $user = $request->get('user_connected');

            ${{ModelNameLowercase}} = $this->{{ModelNameLowercase}}{{ServiceSufix}}->getById($id);
                
            if (!${{ModelNameLowercase}}) {
                return ResponseFormatter::format("{{ModelName}} non trouvée", true, 404);
            }

            $this->{{ModelNameLowercase}}{{ServiceSufix}}->toggle(${{ModelNameLowercase}}, $data, $user);

            DB::commit();
            return ResponseFormatter::format("{{ModelName}} ".(${{ModelNameLowercase}}->active ? "activée": "desactivée")." avec succès", false, 200);
        } catch (\Throwable $th) {
            DB::rollBack();
            return ResponseFormatter::format("Une erreur est survenue lors de la suppression de {{ModelNameLowercase}}");
        }
    }

    /**
     * Supprime un {{ModelNameLowercase}} existant.
     *
     * @param string $id L'ID du {{ModelNameLowercase}} à supprimer.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant le {{ModelNameLowercase}} supprimer.
     */
    public function destroy(string $id)
    {
        try {
            DB::beginTransaction();

            ${{ModelNameLowercase}} = $this->{{ModelNameLowercase}}{{ServiceSufix}}->getById($id);

            if (!${{ModelNameLowercase}}) {
                return ResponseFormatter::format("{{ModelName}} non trouvée", true, 404);
            }

            $this->{{ModelNameLowercase}}{{ServiceSufix}}->delete(${{ModelNameLowercase}});

            DB::commit();
            return ResponseFormatter::format("{{ModelName}} supprimé avec succès", false, 200);

        } catch (\Throwable $th) {
            DB::rollBack();
            return ResponseFormatter::format("Une erreur est survenue lors de la suppression de {{ModelNameLowercase}}");
        }
    }

    /**
     * Restaure un {{ModelNameLowercase}} supprimé.
     *
     * @param string $id L'ID du {{ModelNameLowercase}} à restaurer.
     * @return \Illuminate\Http\JsonResponse La réponse JSON contenant le {{ModelNameLowercase}} restaurer.
     */
    public function restore(string $id)
    {
        try {
            DB::beginTransaction();

            ${{ModelNameLowercase}} = $this->{{ModelNameLowercase}}{{ServiceSufix}}->getById($id, true);

            if (!${{ModelNameLowercase}}) {
                return ResponseFormatter::format("{{ModelName}} non trouvée", true, 404);
            }
            
            $this->{{ModelNameLowercase}}{{ServiceSufix}}->restore(${{ModelNameLowercase}});

            DB::commit();
            return ResponseFormatter::format('Demande restaurée avec succès', false);
        } catch (\Throwable $th) {
            DB::rollBack();
            return ResponseFormatter::format("Une erreur est survenue lors de la restauration de {{ModelNameLowercase}}");
        }
    }
}