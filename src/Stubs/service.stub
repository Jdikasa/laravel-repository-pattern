<?php

namespace {{ServicesNamespace}};

use App\Models\User;
use App\Models\{{ModelName}};
use {{RepositoriesNamespace}}\{{RepositoryPrefix}}{{ModelName}}{{RepositorySufix}};

class {{ModelName}}{{ServiceSufix}}
{
    protected ${{ModelNameLowercase}}{{RepositorySufix}};

    public function __construct(
        {{RepositoryPrefix}}{{ModelName}}{{RepositorySufix}} ${{ModelNameLowercase}}{{RepositorySufix}}
    ) {
        $this->{{ModelNameLowercase}}{{RepositorySufix}} = ${{ModelNameLowercase}}{{RepositorySufix}};
    }

    public function getAll(array $filters)
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->all($filters);
    }

    public function getById(string $id, bool $withTrashed = false)
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->find($id, $withTrashed);
    }

    public function create(array $data, User $user)
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->create($data, $user);
    }

    public function update({{ModelName}} ${{ModelNameLowercase}}, array $data, User $user)
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->update(${{ModelNameLowercase}}, $data, $user);
    }

    public function toggle({{ModelName}} ${{ModelNameLowercase}}, array $data, User $user)
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->toggle(${{ModelNameLowercase}}, $data, $user);
    }

    public function delete({{ModelName}} ${{ModelNameLowercase}})
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->delete(${{ModelNameLowercase}});
    }

    public function restore({{ModelName}} ${{ModelNameLowercase}})
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->restore(${{ModelNameLowercase}});
    }

    public function getPaginated($perPage = 15)
    {
        return $this->{{ModelNameLowercase}}{{RepositorySufix}}->paginate($perPage);
    }
}